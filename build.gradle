import org.apache.commons.lang3.StringUtils

buildscript {
	dependencies {
		classpath 'org.apache.commons:commons-lang3:3.3.2'
	}
}

plugins {
   id 'me.champeau.gradle.jmh' version '0.2.0'
}

apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'java'

repositories {
   mavenCentral()
   mavenLocal()
}

dependencies {
   jmh 'commons-dbutils:commons-dbutils:1.6'
   jmh 'org.apache.tomcat:tomcat-jdbc:8.0.20'
   jmh 'org.postgresql:postgresql:9.4-1201-jdbc41'
}

// return the replacement if it passes some conditions
def lookup = { key -> 
	def val = System.getProperty(key)
	if (StringUtils.isNotBlank(val)) {
	   logger.debug("Using $key to return found system property value $val")
		return val
	}
	else { 
		if (project.hasProperty(key)) {
		   logger.debug("Using $key to return found gradle property value ${project.property(key)}")
			return project.property(key)
		}
	}
	return null
}

def propertyExists = { key ->
	if ( null != lookup(key)) {
		return true
	} else {
		return false
	}
}

def appendIfExists = { key, builder -> 
   if (propertyExists(key)) {
   	builder.append( " -D$key=" )
      builder.append( lookup(key) )
   } else {
   	logger.debug("Didn't find a property for the $key.")
   }
}

jmh {
   jmhVersion = '1.6.1'
   fork=1
   threads=1
   if (propertyExists('threads')) { threads=Integer.parseInt(lookup('threads')).intValue(); }
   jvmArgsAppend = " "
   StringBuilder builder = new StringBuilder();
//   jvmArgsAppend += "-Xrunjdwp:transport=dt_socket,address=burtha-f20:8000,server=y,suspend=y"
   appendIfExists ('host', builder)
   appendIfExists ('port', builder)
   appendIfExists ('database', builder)
   appendIfExists ('user', builder)
   appendIfExists ('password', builder)
   appendIfExists ('maxPoolSize', builder)
   appendIfExists ('small.batch.size', builder)
   appendIfExists ('medium.batch.size', builder)
   appendIfExists ('large.batch.size', builder)
   jvmArgsAppend += builder.toString()
}


